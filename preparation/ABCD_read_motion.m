function [FD, DVARS] = ABCD_read_motion(fmri_dir, subj_list, dosave, outdir, outstem)

% [FD, DVARS] = ABCD_read_motion(fmri_dir, subj_list, dosave, outdir, outstem)
%
% Collect the head motion measures of all subjects from the DCAN-lab-preprocessed rs-fMRI data.
%
% Inputs:
% - fmri_dir
%   Full path of the directory storing the preprocessed resting-state fMRI
%   data by the DCAN lab. 
%   Default: '/data/project/FairAI_Hispanic/data/inm7-superds/original/abcd/derivatives/abcd-hcp-pipeline'
%
% - subj_list
%   List of subjects which passed fMRI prepreocessing quality control (full path). Default:
%   '/data/project/FairAI_Hispanic/scripts/lists/subjects_rs_censor.txt'
% 
% - dosave
%   A 1/0 value to indicate whether the output text files will be saved or not. 
%
% - outdir
%   Full path of output directory.
% 
% - outstem
%   A shared string attached to all output files, including:
%   1. [outdir '/FD' outstem '.txt']   -- collection of all subjects' mean FD
%   2. [outdir '/DV' outstem '.txt']   -- collection of all subjects' mean DVARS
%   3. [outdir '/FD/' sub_ID '.txt']   -- FD timeseries of each subject
%   4. [outdir '/DVARS/' sub_ID '/confound_DVARS']   -- DVARS confounds of each subject, generated by `fsl_motion_outliers`
%   5. [outdir '/DVARS/' sub_ID '/DVARS']   -- DVARS timeseries of each subject, generated by `fsl_motion_outliers`
%   6. [outdir '/DVARS/' sub_ID '/DVARS.png']   -- Plot of DVARS timeseries of each subject, generated by `fsl_motion_outliers`
%
% Outputs:
% - FD
%   A #subjects x 1 vector. Each entry is the framewise displacement of one subject.
%
% - DVARS
%   A #subjects x 1 vector. Each entry is the DVARS of one subject.
%
% Author: Jingwei Li

start_dir = pwd;
proj_dir = '/data/project/FairAI_Hispanic';

if(~exist('fmri_dir', 'var') || isempty(fmri_dir))
    fmri_dir = fullfile(proj_dir, 'data', 'inm7-superds', 'original', 'abcd', 'derivatives', 'abcd-hcp-pipeline');
end

if(~exist('subj_list', 'var') || isempty(subj_list))
    subj_list = fullfile(proj_dir, 'scripts', 'lists', 'subjects_rs_censor.txt');
end

if(dosave==1)
    if(~exist(fullfile(outdir, 'FD'), 'dir'))
        mkdir(fullfile(outdir, 'FD'))
    end
    if(~exist(fullfile(outdir, 'DVARS'), 'dir'))
        mkdir(fullfile(outdir, 'DVARS'))
    end
else
    outdir = []; outstem = [];
end

if(exist(fullfile(outdir, ['FD' outstem '.txt']), 'file') && exist(fullfile(outdir, ['DV' outstem '.txt']), 'file'))
    FD = dlmread(fullfile(outdir, ['FD' outstem '.txt']));
    DVARS = dlmread(fullfile(outdir, ['DV' outstem '.txt']));
    fprintf('[ABCD_read_motion]: Read FD and DV from pre-saved files.\n')
    return
end

[subjects, nsub] = CBIG_text2cell(subj_list);
ses = 'ses-baselineYear1Arm1';

FD = zeros(nsub, 1);
DVARS = zeros(nsub, 1);
for i = 1:nsub
    s = subjects{i};
    cd(fmri_dir)
    system(sprintf('datalad get -n %s', s));
    system(sprintf('git -C %s config --local --add remote.datalad.annex-ignore true', s));

    cd(fullfile(fmri_dir, s, ses, 'func'))
    [flag, msg] = system(sprintf('ls -d %s', [s '_' ses '_task-rest_run-*_space-MNI_bold.nii.gz']))
    if(flag==0)
        runs = strsplit(msg);
        runs = runs(~cellfun('isempty',runs));
        curr_FD = nan(length(runs), 1);
        curr_DVARS = nan(length(runs), 1);
        for j = 1:length(runs)
            runnum = strsplit(runs{j}, '_'); runnum = runnum{4};
            %% check if dtseries file of current run was generated
            dt = [s '_' ses '_task-rest_' runnum '_bold_timeseries.dtseries.nii']
            [flag, msg] = system(sprintf('ls -d %s', dt));
            if(flag~=0)
                warning('%s does not exist.\n', dt)
                continue
            end

            %% check if output FD and DVARS files already exist
            if(exist(fullfile(outdir, 'DVARS', s, ['DVARS_' runnum]), 'file') && ...
                exist(fullfile(outdir, 'FD', s, [runnum '.txt']), 'file'))

                curr_FD(j) = mean(dlmread(fullfile(outdir, 'FD', s, [runnum '.txt'])));
                curr_DVARS(j) = mean(dlmread(fullfile(outdir, 'DVARS', s, ['DVARS_' runnum])));
            else
                %% FD
                mt_tsv = [s '_' ses '_task-rest_' runnum '_desc-includingFD_motion.tsv'];
                system(sprintf('datalad get -s inm7-storage %s', mt_tsv));
                % for some run, the "desc-includingFD_motion.tsv" file doesn't exist
                % calculate FD from 6 motion parameters
                if(~exist(mt_tsv))
                    mt_tsv = [s '_' ses '_task-rest_' runnum '_motion.tsv'];
                    system(sprintf('datalad get -s inm7-storage %s', mt_tsv));
                    system(sprintf('cat %s | tr -s ''([\t]+)'' '','' > tmp.tsv', mt_tsv)) % replace multiple \t to a single comma
                    % add comma to the beginning of the first line (because there are extra tabs from line 2 in the original file); 
                    % remove the first comma of each line (remove the extra tab); 
                    % remove the last comma of each line (because there are extra tabs at the end of each line in the original file)
                    system('echo ",$(cat tmp.tsv)" > tmp2.tsv; cut -c 2- < tmp2.tsv > tmp3.tsv; sed -i ''s/.$//'' tmp3.tsv')
                    mt = tdfread('tmp3.tsv', ',')
                    % for some run, there isn't extra tab at the end of first line. Therefore the previous step would remove the 't'
                    if(~isfield(mt, 'RotZDt'))
                        [mt.RotZDt] = mt.RotZD;
                        mt = rmfield(mt, 'RotZD');
                    end
                    mt.framewise_displacement = abs(mt.XDt) + abs(mt.YDt) + abs(mt.ZDt) + ...
                        50*pi/360 * (abs(mt.RotXDt) + abs(mt.RotYDt) + abs(mt.RotZDt));
                    delete tmp.tsv tmp2.tsv tmp3.tsv
                else
                    mt = tdfread(mt_tsv, ' ');
                end
                mkdir(fullfile(outdir, 'FD', s))
                dlmwrite(fullfile(outdir, 'FD', s, [runnum '.txt']), mt.framewise_displacement)

                %% DVARS
                system(sprintf('datalad get -s inm7-storage %s', runs{j}))
                mkdir(fullfile(outdir, 'DVARS', s))
                system(sprintf('fsl_motion_outliers -i %s -o %s	-s %s -p %s --dvars --nomoco', runs{j}, ...
                    fullfile(outdir, 'DVARS', s, ['confound_DVARS_' runnum]), fullfile(outdir, 'DVARS', s, ['DVARS_' runnum]), ...
                    fullfile(outdir, 'DVARS', s, ['DVARS_' runnum])))

                curr_FD(j) = mean(mt.framewise_displacement);
                curr_DVARS(j) = mean(dlmread(fullfile(outdir, 'DVARS', s, ['DVARS_' runnum])));

                %% drop datalad files
                system(sprintf('datalad drop %s', runs{j}));
                system(sprintf('datalad drop %s', mt_tsv));
            end
            
        end
        FD(i) = nanmean(curr_FD);
        DVARS(i) = nanmean(curr_DVARS);
        cd(fmri_dir)
        system(sprintf('datalad uninstall %s', s));
    else
        error('%s does not have any MNI space timeseries. Check your subject list!', s)
    end

end

if(dosave==1)
    FD_save = fullfile(outdir, ['FD' outstem '.txt']);
    DV_save = fullfile(outdir, ['DV' outstem '.txt']);
    
    dlmwrite(FD_save, FD);
    dlmwrite(DV_save, DVARS);
end
cd(start_dir)

end

